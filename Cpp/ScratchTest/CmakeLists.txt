#set (CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/test/lib)
#set (CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/test/lib)
#set (CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/test/bin)

#################################
# GTest
#################################
include(FetchContent)
FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG release-1.10.0
)

set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(googletest)

#gtest
# Download and unpack googletest at configure time
# if (NOT CONFIGURED_ONCE)
#   configure_file(GtestCMakeLists.txt googletest-download/CMakeLists.txt)
#   execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
#     RESULT_VARIABLE result
#     WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )
#   if(result)
#     message(FATAL_ERROR "CMake step for googletest failed: ${result}")
#   endif()
#   execute_process(COMMAND ${CMAKE_COMMAND} --build .
#     RESULT_VARIABLE result
#     WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/googletest-download )
#   if(result)
#     message(FATAL_ERROR "Build step for googletest failed: ${result}")
#   endif()

#   # Prevent overriding the parent project's compiler/linker
#   # settings on Windows
#   set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
# endif()

# # Add googletest directly to our build. This defines
# # the gtest and gtest_main targets.
# add_subdirectory(${CMAKE_CURRENT_BINARY_DIR}/googletest-src
#                 ${CMAKE_CURRENT_BINARY_DIR}/googletest-build
#                 EXCLUDE_FROM_ALL)

# The gtest/gtest_main targets carry header search path
# dependencies automatically when using CMake 2.8.11 or
# later. Otherwise we have to add them here ourselves.
# if (CMAKE_VERSION VERSION_LESS 2.8.11)
#   include_directories("${gtest_SOURCE_DIR}/include")
# endif()
# Now simply link against gtest or gtest_main as needed. Eg

#########################
# ScratchTest
#########################
project(ScratchTest)

set(SOURCE src/Main.cpp)

add_executable(${PROJECT_NAME} ${SOURCE})

target_link_libraries(${PROJECT_NAME} gtest)
target_link_libraries(${PROJECT_NAME} gmock)
target_link_libraries(${PROJECT_NAME} ScratchLib)

file(GLOB_RECURSE sources CONFIGURE_DEPENDS "src/*.cpp")
target_include_directories(${PROJECT_NAME} PRIVATE inc)
target_sources(${PROJECT_NAME} PRIVATE ${sources})